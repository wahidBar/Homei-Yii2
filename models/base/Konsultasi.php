<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build
// Modified by Defri Indra
// 2021

namespace app\models\base;

use Yii;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "t_konsultasi".
 *
 * @property integer $id
 * @property integer $id_isian_lanjutan
 * @property integer $id_user
 * @property integer $id_konsultan
 * @property integer $id_firebase_chat
 * @property string $created_at
 * @property string $updated_at
 *
 * @property \app\models\IsianLanjutan $isianLanjutan
 * @property \app\models\User $user
 * @property \app\models\User $konsultan
 * @property string $aliasModel
 */
abstract class Konsultasi extends \yii\db\ActiveRecord
{



    const SCENARIO_CREATE = 'create';
    const SCENARIO_UPDATE = 'update';
    const SCENARIO_UPDATE_KONSULTAN = 'update-konsultan';
    const SCENARIO_NONAKTIFKAN_CHAT = 'nonaktifkan-chat';
    public $_render = [];

    /**
     * @inheiritance
     */
    public function fields()
    {
        $parent = parent::fields();

        if (isset($parent['id'])) :
            unset($parent['id']);
            $parent['id'] = function ($model) {
                return $model->id;
            };
        endif;
        if (isset($parent['ticket'])) :
            unset($parent['ticket']);
            $parent['ticket'] = function ($model) {
                return $model->ticket;
            };
        endif;
        if (isset($parent['kode_isian_lanjutan'])) :
            unset($parent['kode_isian_lanjutan']);
            $parent['kode_isian_lanjutan'] = function ($model) {
                return $model->kode_isian_lanjutan;
            };
        endif;
        if (isset($parent['is_active'])) :
            unset($parent['is_active']);
            $parent['is_active'] = function ($model) {
                return $model->is_active;
            };
        endif;
        if (isset($parent['id_isian_lanjutan'])) :
            unset($parent['id_isian_lanjutan']);
            $parent['id_isian_lanjutan'] = function ($model) {
                return $model->id_isian_lanjutan;
            };
            $parent['_isian_lanjutan'] = function ($model) {
                $rel = $model->getIsianLanjutan()->select([
                    "kode_unik",
                    "kode_proyek",
                    "id_satuan",
                    "id_konsep_design",
                    "id_penawaran",
                    // "id_user",
                    // "id_kontraktor",
                    "id_proyek",
                    "id_lantai",
                    "id_wilayah_provinsi",
                    "id_wilayah_kota",
                    "id_wilayah_kecamatan",
                    "id_wilayah_desa",
                    "alamat_pelanggan",
                    "alamat_proyek",
                    "latitude",
                    "longitude",
                    "nama_awal",
                    "nama_akhir",
                    "no_hp",
                    "label",
                    "panjang",
                    "lebar",
                    "budget",
                    "luas_tanah",
                    "rencana_pembangunan",
                    "rencana_survey",
                    "keterangan",
                    "dokumen_tor",
                    "approval_dokumen_tor",
                    "dp_pembayaran",
                    "bukti_pembayaran",
                    "tanggal_pembayaran",
                    "keterangan_pembayaran",
                    "status_pembayaran",
                    "alasan_tolak",
                    "alasan_tolak_tor",
                    "boq_proyek",
                    "nomor_spk",
                    "informasi_proyek",
                    "status_boq",
                    "created_at",
                    "updated_at",
                    "deleted_at",
                    "created_by",
                    "updated_by",
                    "deleted_by",
                    "is_beli_material",
                    // "flag",
                    "status",
                ])->one();
                if ($rel) :
                    return $rel;
                endif;
                return null;
            };
        endif;
        if (isset($parent['id_user'])) :
            unset($parent['id_user']);
            $parent['id_user'] = function ($model) {
                return $model->id_user;
            };
            $parent['_user'] = function ($model) {
                $rel = $model->getUser()->select([
                    'id',
                    'username',
                    'name',
                    'photo_url',
                    'last_login',
                ])->one();
                if ($rel) :
                    return $rel;
                endif;
                return null;
            };
        endif;
        if (isset($parent['id_konsultan'])) :
            unset($parent['id_konsultan']);
            $parent['id_konsultan'] = function ($model) {
                return $model->id_konsultan;
            };
            $parent['_konsultan'] = function ($model) {
                $rel = $model->getKonsultan()->select([
                    'id',
                    'username',
                    'name',
                    'photo_url',
                    'last_login',
                ])->one();
                if ($rel) :
                    return $rel;
                endif;
                return null;
            };
        endif;
        if (isset($parent['created_at'])) :
            unset($parent['created_at']);
            $parent['created_at'] = function ($model) {
                return \app\components\Tanggal::toReadableDate($model->created_at, false);
            };
        endif;
        if (isset($parent['updated_at'])) :
            unset($parent['updated_at']);
            $parent['updated_at'] = function ($model) {
                return \app\components\Tanggal::toReadableDate($model->updated_at, false);
            };
        endif;

        return $parent;
    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 't_konsultasi';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                'createdAtAttribute' => 'created_at',
                'updatedAtAttribute' => 'updated_at',
                'value' => date("Y-m-d H:i:s"),
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['ticket', 'id_user'], 'required'],
            [['id_isian_lanjutan', 'id_user', 'id_konsultan'], 'integer'],
            [['created_at', 'updated_at'], 'safe'],
            [['kode_isian_lanjutan'], 'string', 'max' => 50],
            [['id_isian_lanjutan'], 'exist', 'skipOnError' => true, 'targetClass' => \app\models\IsianLanjutan::className(), 'targetAttribute' => ['id_isian_lanjutan' => 'id']],
            [['id_user'], 'exist', 'skipOnError' => true, 'targetClass' => \app\models\User::className(), 'targetAttribute' => ['id_user' => 'id']],
            [['id_konsultan'], 'exist', 'skipOnError' => true, 'targetClass' => \app\models\User::className(), 'targetAttribute' => ['id_konsultan' => 'id']]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'ticket' => 'Tiket',
            'id_isian_lanjutan' => 'Isian Lanjutan',
            'id_user' => 'User',
            'id_konsultan' => 'Konsultan',
            'created_at' => 'Dibuat pada',
            'updated_at' => 'Diubah Pada',
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return array_merge(parent::attributeHints(), [
            'id_konsultan' => 'mendapatkan konsultan di role_user',
        ]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getIsianLanjutan()
    {
        return $this->hasOne(\app\models\IsianLanjutan::className(), ['id' => 'id_isian_lanjutan']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(\app\models\User::className(), ['id' => 'id_user']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getKonsultan()
    {
        return $this->hasOne(\app\models\User::className(), ['id' => 'id_konsultan']);
    }


    /**
     * @return \yii\db\ActiveQuery
     */
    public function getKonsultasiChats()
    {
        return $this->hasOne(\app\models\KonsultasiChat::className(), ['konsultasi_id' => 'id']);
    }

    /**
     * @inheritdoc
     * @return \app\models\query\KonsultasiQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \app\models\query\KonsultasiQuery(get_called_class());
    }



    public function scenarios()
    {
        $parent = parent::scenarios();

        $columns = [
            'id',
            'ticket',
            'id_isian_lanjutan',
            'id_user',
            'id_konsultan',
            'created_at',
            'updated_at',
        ];

        $konsultan = [
            'id_konsultan',
        ];

        $nonaktifkan_chat = [
            'is_active'
        ];

        $parent[static::SCENARIO_CREATE] = $columns;
        $parent[static::SCENARIO_UPDATE] = $columns;
        $parent[static::SCENARIO_UPDATE_KONSULTAN] = $konsultan;
        $parent[static::SCENARIO_NONAKTIFKAN_CHAT] = $nonaktifkan_chat;
        return $parent;
    }

    public function setRender($arr)
    {
        $this->_render = array_merge($this->_render, $arr);
    }

    public function removeRender($arr)
    {
        unset($this->_render[$arr]);
    }

    /**
     * Simplify return data xD
     */
    public function render()
    {
        return array_merge($this->_render, [
            "model" => $this,
        ]);
    }

    /**
     * override validate
     */
    public function validate($attributeNames = null, $clearErrors = true)
    {
        return parent::validate($attributeNames, $clearErrors);
    }

    /**
     * override load
     */
    public function load($data, $formName = null, $service = "web")
    {
        return parent::load($data, $formName);
    }
}
