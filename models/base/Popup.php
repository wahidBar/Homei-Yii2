<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build
// Modified by Defri Indra
// 2021

namespace app\models\base;

use Yii;

/**
 * This is the base-model class for table "t_popup".
 *
 * @property integer $id
 * @property string $image
 * @property string $android_route
 * @property string $android_params
 * @property integer $android_redirect_type
 * @property integer $android_show
 * @property integer $web_show
 * @property string $web_link
 * @property integer $flag
 * @property string $aliasModel
 */
abstract class Popup extends \yii\db\ActiveRecord
{



    const SCENARIO_CREATE = 'create';
    const SCENARIO_UPDATE = 'update';
    public $_render = [];

    /**
     * @inheiritance
     */
    public function fields()
    {
        $parent = parent::fields();

        if (isset($parent['id'])) :
            unset($parent['id']);
            $parent['id'] = function ($model) {
                return $model->id;
            };
        endif;
        if (isset($parent['image'])) :
            unset($parent['image']);
            $parent['image'] = function ($model) {
                return \Yii::$app->formatter->asMyimage($model->image, false);
            };
        endif;
        if (isset($parent['android_route'])) :
            unset($parent['android_route']);
            $parent['android_route'] = function ($model) {
                return $model->android_route;
            };
        endif;
        if (isset($parent['android_params'])) :
            unset($parent['android_params']);
            $parent['android_params'] = function ($model) {
                if ($model->android_params == null) return null;
                return json_decode($model->android_params);
            };
        endif;
        if (isset($parent['android_redirect_type'])) :
            unset($parent['android_redirect_type']);
            $parent['android_redirect_type'] = function ($model) {
                return $model->android_redirect_type;
            };
            $parent['_android_redirect_type'] = function ($model) {
                return $model->getAndroidRedirectTypeLabel();
            };
        endif;
        if (isset($parent['android_show'])) :
            unset($parent['android_show']);
            $parent['android_show'] = function ($model) {
                return $model->android_show;
            };
            $parent['_android_show'] = function ($model) {
                return $model->getAndroidShowLabel();
            };
        endif;
        if (isset($parent['web_show'])) :
            unset($parent['web_show']);
            $parent['web_show'] = function ($model) {
                return $model->web_show;
            };
            $parent['_web_show'] = function ($model) {
                return $model->getWebShowLabel();
            };
        endif;
        if (isset($parent['web_link'])) :
            unset($parent['web_link']);
            $parent['web_link'] = function ($model) {
                return $model->web_link;
            };
        endif;



        return $parent;
    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 't_popup';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['android_show', 'web_show' ], 'required'],
            [['android_redirect_type', 'android_show', 'web_show'], 'integer'],
            [['image', 'android_params'], 'string', 'max' => 255],
            [['android_route'], 'string', 'max' => 150],
            [['web_link'], 'string', 'max' => 200]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('cruds', 'ID'),
            'image' => Yii::t('cruds', 'Image'),
            'android_route' => Yii::t('cruds', 'Android Route'),
            'android_params' => Yii::t('cruds', 'Android Params'),
            'android_redirect_type' => Yii::t('cruds', 'Android Redirect Type'),
            'android_show' => Yii::t('cruds', 'Android Show'),
            'web_show' => Yii::t('cruds', 'Web Show'),
            'web_link' => Yii::t('cruds', 'Web Link'),
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return array_merge(parent::attributeHints(), [
            'type' => Yii::t('cruds', '0:link,1:android-route'),
            'android_redirect_type' => Yii::t('cruds', '0:link,1:component'),
            'android_show' => Yii::t('cruds', '0:hide,1:show'),
            'web_show' => Yii::t('cruds', '0:hide,1:show'),
        ]);
    }



    /**
     * @inheritdoc
     * @return \app\models\query\PopupQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \app\models\query\PopupQuery(get_called_class());
    }



    public function scenarios()
    {
        $parent = parent::scenarios();

        $columns = [
            'id',
            'image',
            'android_route',
            'android_params',
            'android_redirect_type',
            'android_show',
            'web_show',
            'web_link',
        ];

        $parent[static::SCENARIO_CREATE] = $columns;
        $parent[static::SCENARIO_UPDATE] = $columns;
        return $parent;
    }

    public function setRender($arr)
    {
        $this->_render = array_merge($this->_render, $arr);
    }

    public function removeRender($arr)
    {
        unset($this->_render[$arr]);
    }

    /**
     * Simplify return data xD
     */
    public function render()
    {
        return array_merge($this->_render, [
            "model" => $this,
        ]);
    }

    /**
     * override validate
     */
    public function validate($attributeNames = null, $clearErrors = true)
    {
        return parent::validate($attributeNames, $clearErrors);
    }

    /**
     * override load
     */
    public function load($data, $formName = null, $service = "web")
    {
        return parent::load($data, $formName);
    }
}
