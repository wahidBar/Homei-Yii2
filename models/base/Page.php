<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build
// Modified by Defri Indra
// 2021

namespace app\models\base;

use Yii;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "t_pages".
 *
 * @property integer $id
 * @property string $slug
 * @property string $thumbnail
 * @property string $title
 * @property string $pages
 * @property integer $view_count
 * @property string $created_at
 * @property string $updated_at
 * @property string $aliasModel
 */
abstract class Page extends \yii\db\ActiveRecord
{



    const SCENARIO_CREATE = 'create';
    const SCENARIO_UPDATE = 'update';
    public $_render = [];

    /**
     * @inheiritance
     */
    public function fields()
    {
        $parent = parent::fields();

        if (isset($parent['id'])) :
            unset($parent['id']);
            $parent['id'] = function ($model) {
                return $model->id;
            };
        endif;
        if (isset($parent['slug'])) :
            unset($parent['slug']);
            $parent['slug'] = function ($model) {
                return $model->slug;
            };
        endif;
        if (isset($parent['thumbnail'])) :
            unset($parent['thumbnail']);
            $parent['thumbnail'] = function ($model) {
                return $model->thumbnail;
            };
        endif;
        if (isset($parent['title'])) :
            unset($parent['title']);
            $parent['title'] = function ($model) {
                return $model->title;
            };
        endif;
        if (isset($parent['pages'])) :
            unset($parent['pages']);
            $parent['pages'] = function ($model) {
                return $model->pages;
            };
        endif;
        if (isset($parent['view_count'])) :
            unset($parent['view_count']);
            $parent['view_count'] = function ($model) {
                return $model->view_count;
            };
        endif;
        if (isset($parent['created_at'])) :
            unset($parent['created_at']);
            $parent['created_at'] = function ($model) {
                return \app\components\Tanggal::toReadableDate($model->created_at, false);
            };
        endif;
        if (isset($parent['updated_at'])) :
            unset($parent['updated_at']);
            $parent['updated_at'] = function ($model) {
                return \app\components\Tanggal::toReadableDate($model->updated_at, false);
            };
        endif;



        return $parent;
    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 't_pages';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                'createdAtAttribute' => 'created_at',
                'updatedAtAttribute' => 'updated_at',
                'value' => date("Y-m-d H:i:s"),
            ],
            // blamable
            [
                'class' => 'yii\behaviors\BlameableBehavior',
                'createdByAttribute' => 'created_by',
                'updatedByAttribute' => null,
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['slug', 'title', 'pages'], 'required'],
            [['pages'], 'string'],
            [['view_count'], 'integer'],
            [['created_at', 'updated_at'], 'safe'],
            [['slug', 'thumbnail', 'title'], 'string', 'max' => 250]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('cruds', 'ID'),
            'slug' => Yii::t('cruds', 'Slug'),
            'thumbnail' => Yii::t('cruds', 'Thumbnail'),
            'title' => Yii::t('cruds', 'Title'),
            'pages' => Yii::t('cruds', 'Pages'),
            'view_count' => Yii::t('cruds', 'View Count'),
            'created_at' => 'Dibuat pada',
            'updated_at' => 'Diubah Pada',
        ];
    }

    public function getCreatedBy()
    {
        return $this->hasOne(User::className(), ['id' => 'created_by']);
    }


    /**
     * @inheritdoc
     * @return \app\models\query\PageQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \app\models\query\PageQuery(get_called_class());
    }



    public function scenarios()
    {
        $parent = parent::scenarios();

        $columns = [
            'id',
            'slug',
            'thumbnail',
            'title',
            'pages',
            'view_count',
            'created_at',
            'updated_at',
        ];

        $parent[static::SCENARIO_CREATE] = $columns;
        $parent[static::SCENARIO_UPDATE] = $columns;
        return $parent;
    }

    public function setRender($arr)
    {
        $this->_render = array_merge($this->_render, $arr);
    }

    public function removeRender($arr)
    {
        unset($this->_render[$arr]);
    }

    /**
     * Simplify return data xD
     */
    public function render()
    {
        return array_merge($this->_render, [
            "model" => $this,
        ]);
    }

    /**
     * override validate
     */
    public function validate($attributeNames = null, $clearErrors = true)
    {
        return parent::validate($attributeNames, $clearErrors);
    }

    /**
     * override load
     */
    public function load($data, $formName = null, $service = "web")
    {
        return parent::load($data, $formName);
    }
}
