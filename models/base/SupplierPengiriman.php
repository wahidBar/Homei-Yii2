<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build
// Modified by Defri Indra
// 2021

namespace app\models\base;

use Yii;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "t_supplier_pengiriman_log".
 *
 * @property integer $id
 * @property integer $supplier_order_id
 * @property integer $status
 * @property string $keterangan
 * @property string $tanggal
 * @property string $created_at
 * @property string $updated_at
 * @property integer $created_by
 * @property integer $updated_by
 *
 * @property \app\models\SupplierOrder $supplierOrder
 * @property \app\models\User $createdBy
 * @property \app\models\User $updatedBy
 * @property string $aliasModel
 */
abstract class SupplierPengiriman extends \yii\db\ActiveRecord
{



    const SCENARIO_CREATE = 'create';
    const SCENARIO_UPDATE = 'update';
    public $_render = [];

    /**
     * @inheiritance
     */
    public function fields()
    {
        $parent = parent::fields();

        if (isset($parent['id'])) :
            unset($parent['id']);
            $parent['id'] = function ($model) {
                return $model->id;
            };
        endif;
        if (isset($parent['supplier_order_id'])) :
            unset($parent['supplier_order_id']);
            $parent['supplier_order_id'] = function ($model) {
                return $model->supplier_order_id;
            };
            $parent['_supplier_order'] = function ($model) {
                $rel = $model->supplierOrder;
                if ($rel) :
                    return $rel;
                endif;
                return null;
            };
        endif;
        if (isset($parent['keterangan'])) :
            unset($parent['keterangan']);
            $parent['keterangan'] = function ($model) {
                return $model->keterangan;
            };
        endif;
        if (isset($parent['tanggal'])) :
            unset($parent['tanggal']);
            $parent['tanggal'] = function ($model) {
                return \app\components\Tanggal::toReadableDate($model->tanggal, false);
            };
        endif;
        if (isset($parent['created_at'])) :
            unset($parent['created_at']);
            $parent['created_at'] = function ($model) {
                return \app\components\Tanggal::toReadableDate($model->created_at, false);
            };
        endif;
        if (isset($parent['updated_at'])) :
            unset($parent['updated_at']);
            $parent['updated_at'] = function ($model) {
                return \app\components\Tanggal::toReadableDate($model->updated_at, false);
            };
        endif;
        if (isset($parent['created_by'])) :
            unset($parent['created_by']);
            $parent['created_by'] = function ($model) {
                return $model->created_by;
            };
            $parent['_created_by'] = function ($model) {
                return $model->getCreatedBy()->select(['username', 'name', 'photo_url'])->one();
            };
        endif;
        if (isset($parent['updated_by'])) :
            unset($parent['updated_by']);
            $parent['updated_by'] = function ($model) {
                return $model->updated_by;
            };
            $parent['_updated_by'] = function ($model) {
                return $model->getUpdatedBy()->select(['username', 'name', 'photo_url'])->one();
            };
        endif;



        return $parent;
    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 't_supplier_pengiriman_log';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => BlameableBehavior::className(),
            ],
            [
                'class' => TimestampBehavior::className(),
                'createdAtAttribute' => 'created_at',
                'updatedAtAttribute' => 'updated_at',
                'value' => date("Y-m-d H:i:s"),
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['supplier_order_id', 'kode_unik', 'kode_supplier_order', 'tanggal'], 'required'],
            [['supplier_order_id', 'created_by', 'updated_by'], 'integer'],
            [['keterangan'], 'string'],
            [['tanggal', 'created_at', 'updated_at'], 'safe'],
            [['supplier_order_id'], 'exist', 'skipOnError' => true, 'targetClass' => \app\models\SupplierOrder::className(), 'targetAttribute' => ['supplier_order_id' => 'id']],
            [['created_by'], 'exist', 'skipOnError' => true, 'targetClass' => \app\models\User::className(), 'targetAttribute' => ['created_by' => 'id']],
            [['updated_by'], 'exist', 'skipOnError' => true, 'targetClass' => \app\models\User::className(), 'targetAttribute' => ['updated_by' => 'id']]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'supplier_order_id' => 'Pesanan',
            'keterangan' => 'Keterangan',
            'tanggal' => 'Tanggal',
            'created_at' => 'Dibuat pada',
            'updated_at' => 'Diubah Pada',
            'created_by' => 'Dibuat oleh',
            'updated_by' => 'Diubah oleh',
        ];
    }

    /**
     * @inheritdoc
     */
    // public function attributeHints()
    // {
    //     return array_merge(parent::attributeHints(), [
    //         'status' => '0. default, 1. pembayaran diverifikasi 2. pemesanan sedang diproses 3. pesanan dalam pengiriman 4. pesanan telah tiba di tujuan 5. pesanan dikonfirmasi oleh penerima 6. transaksi selesai',
    //     ]);
    // }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSupplierOrder()
    {
        return $this->hasOne(\app\models\SupplierOrder::className(), ['id' => 'supplier_order_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getMasterTemplate()
    {
        return $this->hasOne(\app\models\MasterTemplateOrder::className(), ['id' => 'master_template_order_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSupplierPengirimans()
    {
        return $this->hasMany(\app\models\SupplierPengiriman::className(), ['supplier_order_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCreatedBy()
    {
        return $this->hasOne(\app\models\User::className(), ['id' => 'created_by']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUpdatedBy()
    {
        return $this->hasOne(\app\models\User::className(), ['id' => 'updated_by']);
    }



    /**
     * @inheritdoc
     * @return \app\models\query\SupplierPengirimanQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \app\models\query\SupplierPengirimanQuery(get_called_class());
    }



    public function scenarios()
    {
        $parent = parent::scenarios();

        $columns = [
            'id',
            'kode_unik',
            'supplier_order_id',
            'kode_supplier_order',
            'keterangan',
            'tanggal',
            'created_at',
            'updated_at',
            'created_by',
            'updated_by',
        ];

        $parent[static::SCENARIO_CREATE] = $columns;
        $parent[static::SCENARIO_UPDATE] = $columns;
        return $parent;
    }

    public function setRender($arr)
    {
        $this->_render = array_merge($this->_render, $arr);
    }

    public function removeRender($arr)
    {
        unset($this->_render[$arr]);
    }

    /**
     * Simplify return data xD
     */
    public function render()
    {
        return array_merge($this->_render, [
            "model" => $this,
        ]);
    }

    /**
     * override validate
     */
    public function validate($attributeNames = null, $clearErrors = true)
    {
        return parent::validate($attributeNames, $clearErrors);
    }

    /**
     * override load
     */
    public function load($data, $formName = null, $service = "web")
    {
        return parent::load($data, $formName);
    }
}
