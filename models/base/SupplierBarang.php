<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build
// Modified by Defri Indra
// 2021

namespace app\models\base;

use Yii;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\SluggableBehavior;
use yii\behaviors\TimestampBehavior;
use yii\helpers\Inflector;

/**
 * This is the base-model class for table "t_supplier_barang".
 *
 * @property integer $id
 * @property integer $supplier_id
 * @property string $nama_barang
 * @property string $slug
 * @property integer $satuan_id
 * @property integer $harga
 * @property string $deskripsi
 * @property string $gambar
 * @property string $created_at
 * @property string $updated_at
 * @property integer $created_by
 * @property integer $updated_by
 * @property integer $deleted_by
 * @property integer $status
 * @property integer $flag
 *
 * @property \app\models\Supplier $supplier
 * @property \app\models\MasterSatuan $satuan
 * @property string $aliasModel
 */
abstract class SupplierBarang extends \yii\db\ActiveRecord
{



    const SCENARIO_CREATE = 'create';
    const SCENARIO_UPDATE = 'update';
    const SCENARIO_UPDATE_STOK = 'update-stok';
    public $_render = [];

    /**
     * @inheiritance
     */
    public function fields()
    {
        $parent = parent::fields();

        if (isset($parent['id'])) :
            unset($parent['id']);
            $parent['id'] = function ($model) {
                return $model->id;
            };
        endif;
        if (isset($parent['material_id'])) :
            unset($parent['material_id']);
            $parent['material_id'] = function ($model) {
                return $model->material_id;
            };
            $parent['_material'] = function ($model) {
                $rel = $model->getMaterial()->select('nama')->one();
                if ($rel) :
                    return $rel;
                endif;
                return null;
            };
        endif;
        if (isset($parent['submaterial_id'])) :
            unset($parent['submaterial_id']);
            $parent['submaterial_id'] = function ($model) {
                return $model->submaterial_id;
            };
            $parent['_submaterial'] = function ($model) {
                $rel = $model->getSupplierSubMaterial()->select('nama')->one();
                if ($rel) :
                    return $rel;
                endif;
                return null;
            };
        endif;
        if (isset($parent['supplier_id'])) :
            unset($parent['supplier_id']);
            $parent['supplier_id'] = function ($model) {
                return $model->supplier_id;
            };
            $parent['_supplier'] = function ($model) {
                $rel = $model->getSupplier()->select([
                    'nama_supplier',
                    'alamat',
                    'telepon'
                ])->one();
                if ($rel) :
                    return $rel;
                endif;
                return null;
            };
        endif;
        if (isset($parent['nama_barang'])) :
            unset($parent['nama_barang']);
            $parent['nama_barang'] = function ($model) {
                return $model->nama_barang;
            };
        endif;
        if (isset($parent['slug'])) :
            unset($parent['slug']);
            $parent['slug'] = function ($model) {
                return $model->slug;
            };
        endif;
        if (isset($parent['satuan_id'])) :
            unset($parent['satuan_id']);
            $parent['satuan_id'] = function ($model) {
                return $model->satuan_id;
            };
            $parent['_satuan'] = function ($model) {
                $rel = $model->getSatuan()->select('nama')->one();
                if ($rel) :
                    return $rel;
                endif;
                return null;
            };
        endif;
        if (isset($parent['panjang'])) :
            unset($parent['panjang']);
            $parent['panjang'] = function ($model) {
                return $model->panjang;
            };
        endif;
        if (isset($parent['lebar'])) :
            unset($parent['lebar']);
            $parent['lebar'] = function ($model) {
                return $model->lebar;
            };
        endif;
        if (isset($parent['tebal'])) :
            unset($parent['tebal']);
            $parent['tebal'] = function ($model) {
                return $model->tebal;
            };
        endif;
        if (isset($parent['harga_ritel'])) :
            unset($parent['harga_ritel']);
            $parent['harga_ritel'] = function ($model) {
                return $model->harga_ritel;
            };
        endif;
        if (isset($parent['harga_proyek'])) :
            unset($parent['harga_proyek']);
            $parent['harga_proyek'] = function ($model) {
                return $model->harga_proyek;
            };
        endif;
        if (isset($parent['stok'])) :
            unset($parent['stok']);
            $parent['stok'] = function ($model) {
                return $model->stok;
            };
        endif;
        if (isset($parent['minimal_beli_satuan'])) :
            unset($parent['minimal_beli_satuan']);
            $parent['minimal_beli_satuan'] = function ($model) {
                return $model->minimal_beli_satuan;
            };
        endif;
        if (isset($parent['minimal_beli_volume'])) :
            unset($parent['minimal_beli_volume']);
            $parent['minimal_beli_volume'] = function ($model) {
                return $model->minimal_beli_volume;
            };
        endif;
        if (isset($parent['deskripsi'])) :
            unset($parent['deskripsi']);
            $parent['deskripsi'] = function ($model) {
                return $model->deskripsi;
            };
        endif;
        if (isset($parent['gambar'])) :
            unset($parent['gambar']);
            $parent['gambar'] = function ($model) {
                return \Yii::$app->formatter->asMyimage($model->gambar, false);
            };
        endif;
        if (isset($parent['created_at'])) :
            unset($parent['created_at']);
            $parent['created_at'] = function ($model) {
                return \app\components\Tanggal::toReadableDate($model->created_at, false);
            };
        endif;
        if (isset($parent['updated_at'])) :
            unset($parent['updated_at']);
            $parent['updated_at'] = function ($model) {
                return \app\components\Tanggal::toReadableDate($model->updated_at, false);
            };
        endif;
        if (isset($parent['created_by'])) :
            unset($parent['created_by']);
            $parent['created_by'] = function ($model) {
                return $model->created_by;
            };
            $parent['_created_by'] = function ($model) {
                $rel = $model->getCreatedBy()->select('username')->one();
                if ($rel) :
                    return $rel;
                endif;
                return null;
            };
        endif;
        if (isset($parent['updated_by'])) :
            unset($parent['updated_by']);
            $parent['updated_by'] = function ($model) {
                return $model->updated_by;
            };
            $parent['_updated_by'] = function ($model) {
                $rel = $model->getUpdatedBy()->select('username')->one();
                if ($rel) :
                    return $rel;
                endif;
                return null;
            };
        endif;
        if (isset($parent['deleted_by'])) :
            unset($parent['deleted_by']);
            $parent['deleted_by'] = function ($model) {
                return $model->deleted_by;
            };
            $parent['_deleted_by'] = function ($model) {
                $rel = $model->getDeletedBy()->select('username')->one();
                if ($rel) :
                    return $rel;
                endif;
                return null;
            };
        endif;
        if (isset($parent['status'])) :
            unset($parent['status']);
            $parent['status'] = function ($model) {
                return $model->status;
            };
            $parent['_status'] = function ($model) {
                return $model->getStatuses()[$model->status];
            };
        endif;
        if (isset($parent['params'])) :
            unset($parent['params']);
        endif;
        if (isset($parent['flag'])) :
            unset($parent['flag']);
            $parent['flag'] = function ($model) {
                return $model->flag;
            };
        endif;



        return $parent;
    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 't_supplier_barang';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => BlameableBehavior::className(),
            ],
            [
                'class' => TimestampBehavior::className(),
                'createdAtAttribute' => 'created_at',
                'updatedAtAttribute' => 'updated_at',
                'value' => date("Y-m-d H:i:s"),
            ],
            [
                'class' => SluggableBehavior::className(),
                'value' => function ($event) {
                    $parts = ['barang', $this->nama_barang];
                    return Inflector::slug(implode('-', $parts));
                },
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['supplier_id', 'material_id', 'submaterial_id', 'nama_barang', 'slug', 'satuan_id', 'harga_ritel', 'harga_proyek', 'deskripsi'], 'required'],
            [['supplier_id', 'material_id', 'submaterial_id', 'satuan_id', 'stok', 'created_by', 'updated_by', 'deleted_by', 'status', 'flag'], 'integer'],
            [['deskripsi', 'gambar'], 'string'],
            [['created_at', 'updated_at'], 'safe'],
            [['nama_barang', 'slug'], 'string', 'max' => 255],
            [['supplier_id'], 'exist', 'skipOnError' => true, 'targetClass' => \app\models\Supplier::className(), 'targetAttribute' => ['supplier_id' => 'id']],
            [['material_id'], 'exist', 'skipOnError' => true, 'targetClass' => \app\models\SupplierMaterial::className(), 'targetAttribute' => ['material_id' => 'id']],
            [['submaterial_id'], 'exist', 'skipOnError' => true, 'targetClass' => \app\models\SupplierSubMaterial::className(), 'targetAttribute' => ['submaterial_id' => 'id']],
            [['satuan_id'], 'exist', 'skipOnError' => true, 'targetClass' => \app\models\MasterSatuan::className(), 'targetAttribute' => ['satuan_id' => 'id']],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'material_id' => 'Material',
            'submaterial_id' => 'Sub Material',
            'supplier_id' => 'Pemasok',
            'nama_barang' => 'Nama Barang',
            'slug' => 'Slug',
            'satuan_id' => 'Satuan',
            'panjang' => 'Panjang Barang (cm)',
            'lebar' => 'Lebar Barang (cm)',
            'tebal' => 'Tebal Barang (cm)',
            'stok' => 'Stok',
            'minimal_beli_satuan' => 'Minimal Beli Satuan',
            'minimal_beli_volume' => 'Minimal Beli Volume',
            'harga_ritel' => 'Harga Ritel',
            'harga_proyek' => 'Harga Proyek',
            'deskripsi' => 'Deskripsi',
            'gambar' => 'Gambar',
            'created_at' => 'Dibuat pada',
            'updated_at' => 'Diubah Pada',
            'created_by' => 'Dibuat oleh',
            'updated_by' => 'Diubah oleh',
            'deleted_by' => 'Dihapus oleh',
            'status' => 'Status',
            'flag' => 'Flag',
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return array_merge(parent::attributeHints(), [
            'status' => '0=nonaktif, 1= aktif',
        ]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSupplier()
    {
        return $this->hasOne(\app\models\Supplier::className(), ['id' => 'supplier_id']);
    }

    public function getMaterial()
    {
        return $this->hasOne(\app\models\SupplierMaterial::className(), ['id' => 'material_id']);
    }

    public function getSupplierSubMaterial()
    {
        return $this->hasOne(\app\models\SupplierSubMaterial::className(), ['id' => 'submaterial_id']);
    }

    public function getCreatedBy()
    {
        return $this->hasOne(\app\models\User::className(), ['id' => 'created_by']);
    }

    public function getUpdatedBy()
    {
        return $this->hasOne(\app\models\User::className(), ['id' => 'updated_by']);
    }

    public function getDeletedBy()
    {
        return $this->hasOne(\app\models\User::className(), ['id' => 'deleted_by']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSatuan()
    {
        return $this->hasOne(\app\models\MasterSatuan::className(), ['id' => 'satuan_id']);
    }



    /**
     * @inheritdoc
     * @return \app\models\query\SupplierBarangQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \app\models\query\SupplierBarangQuery(get_called_class());
    }



    public function scenarios()
    {
        $parent = parent::scenarios();

        $columns = [
            'id',
            'material_id',
            'submaterial_id',
            'supplier_id',
            'nama_barang',
            'slug',
            'satuan_id',
            'panjang',
            'lebar',
            'tebal',
            'harga_ritel',
            'harga_proyek',
            'stok',
            'minimal_beli_satuan',
            'minimal_beli_volume',
            'deskripsi',
            'gambar',
            'created_at',
            'updated_at',
            'created_by',
            'updated_by',
            'deleted_by',
            'status',
            'flag',
        ];
        $stok = [
            'stok'
        ];

        $parent[static::SCENARIO_CREATE] = $columns;
        $parent[static::SCENARIO_UPDATE] = $columns;
        $parent[static::SCENARIO_UPDATE_STOK] = $stok;
        return $parent;
    }

    public function setRender($arr)
    {
        $this->_render = array_merge($this->_render, $arr);
    }

    public function removeRender($arr)
    {
        unset($this->_render[$arr]);
    }

    /**
     * Simplify return data xD
     */
    public function render()
    {
        return array_merge($this->_render, [
            "model" => $this,
        ]);
    }

    /**
     * override validate
     */
    public function validate($attributeNames = null, $clearErrors = true)
    {
        return parent::validate($attributeNames, $clearErrors);
    }

    /**
     * override load
     */
    public function load($data, $formName = null, $service = "web")
    {
        return parent::load($data, $formName);
    }
}
