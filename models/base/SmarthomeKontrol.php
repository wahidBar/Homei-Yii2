<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build
// Modified by Defri Indra
// 2021

namespace app\models\base;

use Yii;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "t_smarthome_kontrol".
 *
 * @property integer $id
 * @property integer $id_smarthome
 * @property integer $id_sirkuit
 * @property string $nama
 * @property string $pin
 * @property integer $value
 * @property string $created_at
 * @property integer $flag
 *
 * @property \app\models\Smarthome $smarthome
 * @property \app\models\SmarthomeSirkuit $sirkuit
 * @property string $aliasModel
 */
abstract class SmarthomeKontrol extends \yii\db\ActiveRecord
{



    const SCENARIO_CREATE = 'create';
    const SCENARIO_UPDATE = 'update';
    public $_render = [];

    /**
     * @inheiritance
     */
    public function fields()
    {
        $parent = parent::fields();

        if (isset($parent['id'])) :
            unset($parent['id']);
            $parent['id'] = function ($model) {
                return $model->id;
            };
        endif;
        if (isset($parent['id_smarthome'])) :
            unset($parent['id_smarthome']);
            $parent['id_smarthome'] = function ($model) {
                return $model->id_smarthome;
            };
            $parent['_smarthome'] = function ($model) {
                $rel = $model->smarthome;
                if ($rel) :
                    return $rel;
                endif;
                return null;
            };
        endif;
        if (isset($parent['id_sirkuit'])) :
            unset($parent['id_sirkuit']);
            $parent['id_sirkuit'] = function ($model) {
                return $model->id_sirkuit;
            };
            $parent['_sirkuit'] = function ($model) {
                $rel = $model->sirkuit;
                if ($rel) :
                    return $rel;
                endif;
                return null;
            };
        endif;
        if (isset($parent['ikon'])) :
            unset($parent['ikon']);
            $parent['ikon'] = function ($model) {
                return $model->ikon;
            };
        endif;
        if (isset($parent['nama'])) :
            unset($parent['nama']);
            $parent['nama'] = function ($model) {
                return $model->nama;
            };
        endif;
        if (isset($parent['pin'])) :
            unset($parent['pin']);
            $parent['pin'] = function ($model) {
                return $model->pin;
            };
        endif;
        if (isset($parent['value'])) :
            unset($parent['value']);
            $parent['value'] = function ($model) {
                return $model->value;
            };
        endif;
        if (isset($parent['created_at'])) :
            unset($parent['created_at']);
            $parent['created_at'] = function ($model) {
                return \app\components\Tanggal::toReadableDate($model->created_at, false);
            };
        endif;
        if (isset($parent['flag'])) :
            unset($parent['flag']);
            $parent['flag'] = function ($model) {
                return $model->flag;
            };
        endif;



        return $parent;
    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 't_smarthome_kontrol';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                'createdAtAttribute' => 'created_at',
                'updatedAtAttribute' => false,
                'value' => date("Y-m-d H:i:s"),
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['id_smarthome', 'nama', 'pin', 'value', 'id_sirkuit'], 'required'],
            [['id_smarthome', 'id_sirkuit', 'value', 'flag'], 'integer'],
            [['created_at', 'ikon'], 'safe'],
            [['nama'], 'string', 'max' => 150],
            [['pin'], 'string', 'max' => 20],
            [['id_smarthome'], 'exist', 'skipOnError' => true, 'targetClass' => \app\models\Smarthome::className(), 'targetAttribute' => ['id_smarthome' => 'id']],
            [['id_sirkuit'], 'exist', 'skipOnError' => true, 'targetClass' => \app\models\SmarthomeSirkuit::className(), 'targetAttribute' => ['id_sirkuit' => 'id']]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('cruds', 'ID'),
            'id_smarthome' => Yii::t('cruds', 'Smarthome'),
            'id_sirkuit' => Yii::t('cruds', 'Sirkuit'),
            'ikon' => Yii::t('cruds', 'Ikon'),
            'nama' => Yii::t('cruds', 'Nama'),
            'pin' => Yii::t('cruds', 'Pin'),
            'value' => Yii::t('cruds', 'Status'),
            'created_at' => 'Dibuat pada',
            'flag' => Yii::t('cruds', 'Flag'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSmarthome()
    {
        return $this->hasOne(\app\models\Smarthome::className(), ['id' => 'id_smarthome']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSirkuit()
    {
        return $this->hasOne(\app\models\SmarthomeSirkuit::className(), ['id' => 'id_sirkuit']);
    }



    /**
     * @inheritdoc
     * @return \app\models\query\SmarthomeKontrolQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \app\models\query\SmarthomeKontrolQuery(get_called_class());
    }



    public function scenarios()
    {
        $parent = parent::scenarios();

        $columns = [
            'id',
            'id_smarthome',
            'id_sirkuit',
            'ikon',
            'nama',
            'pin',
            'value',
            'created_at',
            'flag',
        ];

        $parent[static::SCENARIO_CREATE] = $columns;
        $parent[static::SCENARIO_UPDATE] = $columns;
        return $parent;
    }

    public function setRender($arr)
    {
        $this->_render = array_merge($this->_render, $arr);
    }

    public function removeRender($arr)
    {
        unset($this->_render[$arr]);
    }

    /**
     * Simplify return data xD
     */
    public function render()
    {
        return array_merge($this->_render, [
            "model" => $this,
        ]);
    }

    /**
     * override validate
     */
    public function validate($attributeNames = null, $clearErrors = true)
    {
        return parent::validate($attributeNames, $clearErrors);
    }

    /**
     * override load
     */
    public function load($data, $formName = null, $service = "web")
    {
        return parent::load($data, $formName);
    }
}
