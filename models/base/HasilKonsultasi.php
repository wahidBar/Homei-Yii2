<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build
// Modified by Defri Indra
// 2021

namespace app\models\base;

use Yii;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "t_hasil_konsultasi".
 *
 * @property integer $id
 * @property integer $id_isian_lanjutan
 * @property integer $id_konsultan
 * @property string $judul
 * @property string $isi
 * @property string $image
 * @property integer $status
 * @property string $created_at
 * @property string $updated_at
 * @property integer $created_by
 * @property integer $updated_by
 *
 * @property \app\models\TIsianLanjutan $isianLanjutan
 * @property \app\models\User $konsultan
 * @property \app\models\User $createdBy
 * @property \app\models\User $updatedBy
 * @property string $aliasModel
 */
abstract class HasilKonsultasi extends \yii\db\ActiveRecord
{



    const SCENARIO_CREATE = 'create';
    const SCENARIO_UPDATE = 'update';
    public $_render = [];
    
    /**
     * @inheiritance
     */
    public function fields()
    {
        $parent = parent::fields();

        if(isset($parent['id'])) :
            unset($parent['id']);
            $parent['id'] = function($model) {
                return $model->id;
            };
        endif;
        if(isset($parent['id_isian_lanjutan'])) :
            unset($parent['id_isian_lanjutan']);
            $parent['id_isian_lanjutan'] = function($model) {
                return $model->id_isian_lanjutan;
            };
            $parent['_isian_lanjutan'] = function($model) {
                $rel = $model->isianLanjutan;
                if ($rel) :
                    return $rel;
                endif;
                return null;
            };
        endif;
        if(isset($parent['id_konsultan'])) :
            unset($parent['id_konsultan']);
            $parent['id_konsultan'] = function($model) {
                return $model->id_konsultan;
            };
            $parent['_konsultan'] = function($model) {
                $rel = $model->konsultan;
                if ($rel) :
                    return $rel;
                endif;
                return null;
            };
        endif;
        if(isset($parent['judul'])) :
            unset($parent['judul']);
            $parent['judul'] = function($model) {
                return $model->judul;
            };
        endif;
        if(isset($parent['isi'])) :
            unset($parent['isi']);
            $parent['isi'] = function($model) {
                return $model->isi;
            };
            $parent['_isian_lanjutan'] = function($model) {
                $rel = $model->isianLanjutan;
                if ($rel) :
                    return $rel;
                endif;
                return null;
            };
        endif;
        if(isset($parent['image'])) :
            unset($parent['image']);
            $parent['image'] = function($model) {
                return \Yii::$app->formatter->asMyimage($model->image, false);
            };
        endif;
        if(isset($parent['status'])) :
            unset($parent['status']);
            $parent['status'] = function($model) {
                return $model->status;
            };
        endif;
        if(isset($parent['created_at'])) :
            unset($parent['created_at']);
            $parent['created_at'] = function($model) {
                return \app\components\Tanggal::toReadableDate($model->created_at, false);
            };
        endif;
        if(isset($parent['updated_at'])) :
            unset($parent['updated_at']);
            $parent['updated_at'] = function($model) {
                return \app\components\Tanggal::toReadableDate($model->updated_at, false);
            };
        endif;
        if(isset($parent['created_by'])) :
            unset($parent['created_by']);
            $parent['created_by'] = function($model) {
                return $model->created_by;
            };
            $parent['_created_by'] = function($model) {
                return $model->getCreatedBy()->select(['username', 'name', 'photo_url'])->one();
            };
        endif;
        if(isset($parent['updated_by'])) :
            unset($parent['updated_by']);
            $parent['updated_by'] = function($model) {
                return $model->updated_by;
            };
            $parent['_updated_by'] = function($model) {
                return $model->getUpdatedBy()->select(['username', 'name', 'photo_url'])->one();
            };
        endif;



        return $parent;
    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 't_hasil_konsultasi';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => BlameableBehavior::className(),
            ],
            [
                'class' => TimestampBehavior::className(),
                'createdAtAttribute' => 'created_at',
                'updatedAtAttribute' => 'updated_at',
                'value' => date("Y-m-d H:i:s"),
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['id_isian_lanjutan', 'id_konsultan', 'judul', 'isi'], 'required'],
            [['id_isian_lanjutan', 'id_konsultan', 'status', 'created_by', 'updated_by'], 'integer'],
            [['isi'], 'string'],
            [['created_at', 'updated_at'], 'safe'],
            [['judul'], 'string', 'max' => 50],
            [['image'], 'string', 'max' => 255],
            [['id_isian_lanjutan'], 'exist', 'skipOnError' => true, 'targetClass' => \app\models\IsianLanjutan::className(), 'targetAttribute' => ['id_isian_lanjutan' => 'id']],
            [['id_konsultan'], 'exist', 'skipOnError' => true, 'targetClass' => \app\models\User::className(), 'targetAttribute' => ['id_konsultan' => 'id']],
            [['created_by'], 'exist', 'skipOnError' => true, 'targetClass' => \app\models\User::className(), 'targetAttribute' => ['created_by' => 'id']],
            [['updated_by'], 'exist', 'skipOnError' => true, 'targetClass' => \app\models\User::className(), 'targetAttribute' => ['updated_by' => 'id']]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
        'id' => 'ID',
        'id_isian_lanjutan' => 'Isian Lanjutan',
        'id_konsultan' => 'Konsultan',
        'judul' => 'Judul',
        'isi' => 'Isi',
        'image' => 'Gambar',
        'status' => 'Status',
        'created_at' => 'Dibuat pada',
        'updated_at' => 'Diubah Pada',
        'created_by' => 'Dibuat oleh',
        'updated_by' => 'Diubah oleh',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getIsianLanjutan()
    {
        return $this->hasOne(\app\models\IsianLanjutan::className(), ['id' => 'id_isian_lanjutan']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getKonsultan()
    {
        return $this->hasOne(\app\models\User::className(), ['id' => 'id_konsultan']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCreatedBy()
    {
        return $this->hasOne(\app\models\User::className(), ['id' => 'created_by']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUpdatedBy()
    {
        return $this->hasOne(\app\models\User::className(), ['id' => 'updated_by']);
    }





    public function scenarios()
    {
        $parent = parent::scenarios();

        $columns = [
            'id',
            'id_isian_lanjutan',
            'id_konsultan',
            'judul',
            'isi',
            'image',
            'status',
            'created_at',
            'updated_at',
            'created_by',
            'updated_by',
        ];

        $parent[static::SCENARIO_CREATE] = $columns;
        $parent[static::SCENARIO_UPDATE] = $columns;
        return $parent;
    }

    public function setRender($arr)
    {
        $this->_render = array_merge($this->_render, $arr);
    }

    public function removeRender($arr)
    {
        unset($this->_render[$arr]);
    }

    /**
     * Simplify return data xD
     */
    public function render()
    {
        return array_merge($this->_render, [
            "model" => $this,
        ]);
    }

    /**
     * override validate
     */
    public function validate($attributeNames = null, $clearErrors = true)
    {
        return parent::validate($attributeNames, $clearErrors);
    }

    /**
     * override load
     */
    public function load($data, $formName = null, $service = "web")
    {
        return parent::load($data, $formName);
    }

}
