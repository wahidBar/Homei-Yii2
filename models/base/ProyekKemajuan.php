<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build
// Modified by Defri Indra
// 2021

namespace app\models\base;

use Yii;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "t_proyek_kemajuan".
 *
 * @property integer $id
 * @property integer $id_proyek
 * @property integer $id_satuan
 * @property string $item
 * @property double $volume
 * @property double $bobot
 * @property double $volume_kemajuan
 * @property double $bobot_kemajuan
 * @property integer $status_verifikasi
 * @property string $created_at
 * @property string $updated_at
 * @property string $deleted_at
 * @property integer $created_by
 * @property integer $updated_by
 * @property integer $deleted_by
 *
 * @property \app\models\ProyekGaleri[] $proyekGaleris
 * @property \app\models\Proyek $proyek
 * @property \app\models\MasterSatuan $satuan
 * @property \app\models\User $createdBy
 * @property \app\models\User $updatedBy
 * @property \app\models\User $deletedBy
 * @property \app\models\ProyekKemajuanHarian[] $proyekKemajuanHarians
 * @property string $aliasModel
 */
abstract class ProyekKemajuan extends \yii\db\ActiveRecord
{

    const SCENARIO_CREATE = 'create';
    const SCENARIO_UPDATE = 'update';
    const SCENARIO_DELETE = 'delete';
    public $_render = [];

    public $excel;

    /**
     * @inheiritance
     */
    public function fields()
    {
        $parent = parent::fields();

        if (isset($parent['id'])) :
            unset($parent['id']);
            $parent['id'] = function ($model) {
                return $model->id;
            };
        endif;
        if (isset($parent['id_proyek'])) :
            unset($parent['id_proyek']);
            $parent['id_proyek'] = function ($model) {
                return $model->id_proyek;
            };
            $parent['_proyek_galeris'] = function ($model) {
                $rel = $model->getProyekGaleris()->select(["id"])->all();
                if ($rel) :
                    return $rel;
                endif;
                return null;
            };
            $parent['_proyek'] = function ($model) {
                $rel = $model->getProyek()->select("id, nama_proyek")->one();
                if ($rel) :
                    return $rel;
                endif;
                return null;
            };
            $parent['_proyek_kemajuan_harians'] = function ($model) {
                $rel = $model->getProyekKemajuanHarians()->select(["id"])->all();
                if ($rel) :
                    return $rel;
                endif;
                return null;
            };
        endif;
        if (isset($parent['id_satuan'])) :
            unset($parent['id_satuan']);
            $parent['id_satuan'] = function ($model) {
                return $model->id_satuan;
            };
            $parent['_satuan'] = function ($model) {
                $rel = $model->satuan;
                if ($rel) :
                    return $rel;
                endif;
                return null;
            };
        endif;
        if (isset($parent['item'])) :
            unset($parent['item']);
            $parent['item'] = function ($model) {
                return $model->item;
            };
        endif;
        if (isset($parent['volume'])) :
            unset($parent['volume']);
            $parent['volume'] = function ($model) {
                return $model->volume;
            };
        endif;
        if (isset($parent['bobot'])) :
            unset($parent['bobot']);
            $parent['bobot'] = function ($model) {
                return $model->bobot;
            };
        endif;
        if (isset($parent['nilai_biaya'])) :
            unset($parent['nilai_biaya']);
            $parent['nilai_biaya'] = function ($model) {
                return \app\components\Angka::toReadableHarga($model->nilai_biaya, false);
            };
        endif;
        if (isset($parent['volume_kemajuan'])) :
            unset($parent['volume_kemajuan']);
            $parent['volume_kemajuan'] = function ($model) {
                return $model->volume_kemajuan;
            };
        endif;
        if (isset($parent['bobot_kemajuan'])) :
            unset($parent['bobot_kemajuan']);
            $parent['bobot_kemajuan'] = function ($model) {
                return $model->bobot_kemajuan;
            };
        endif;
        if (isset($parent['status_verifikasi'])) :
            unset($parent['status_verifikasi']);
            $parent['status_verifikasi'] = function ($model) {
                return $model->getStatus();
            };
        endif;
        if (isset($parent['created_at'])) :
            unset($parent['created_at']);
            $parent['created_at'] = function ($model) {
                return \app\components\Tanggal::toReadableDate($model->created_at, false);
            };
        endif;
        if (isset($parent['updated_at'])) :
            unset($parent['updated_at']);
            $parent['updated_at'] = function ($model) {
                return \app\components\Tanggal::toReadableDate($model->updated_at, false);
            };
        endif;
        if (isset($parent['deleted_at'])) :
            unset($parent['deleted_at']);
            $parent['deleted_at'] = function ($model) {
                return $model->deleted_at;
            };
        endif;
        if (isset($parent['created_by'])) :
            unset($parent['created_by']);
            $parent['created_by'] = function ($model) {
                return $model->created_by;
            };
            $parent['_created_by'] = function ($model) {
                $rel = $model->createdBy;
                if ($rel) :
                    return $rel;
                endif;
                return null;
            };
        endif;
        if (isset($parent['updated_by'])) :
            unset($parent['updated_by']);
            $parent['updated_by'] = function ($model) {
                return $model->updated_by;
            };
            $parent['_updated_by'] = function ($model) {
                $rel = $model->updatedBy;
                if ($rel) :
                    return $rel;
                endif;
                return null;
            };
        endif;
        if (isset($parent['deleted_by'])) :
            unset($parent['deleted_by']);
            $parent['deleted_by'] = function ($model) {
                return $model->deleted_by;
            };
            $parent['_deleted_by'] = function ($model) {
                $rel = $model->deletedBy;
                if ($rel) :
                    return $rel;
                endif;
                return null;
            };
        endif;
        if (isset($parent['flag'])) :
            unset($parent['flag']);
            $parent['flag'] = function ($model) {
                return $model->flag;
            };
        endif;

        if (\app\components\Constant::isUriContain([
            "/kontraktor/proyek-kemajuan/view",
            "/proyek/view",
        ])) :
            $parent['children'] = function ($model) {
                $rel = $model->getChildren()
                    ->select('id,id_parent,id_satuan,item,volume,bobot,volume_kemajuan,bobot_kemajuan,status_verifikasi,created_at,created_by')
                    ->andWhere(['flag' => 1])
                    ->all();
                if ($rel) :
                    return $rel;
                endif;
                return [];
            };
        endif;

        $parent['has_children'] = function ($model) {
            $rel = $model->getChildren()
                ->select('id')
                ->count();
            return $rel ? true : false;
        };

        // $parent['proyek_galeri'] = function($model) {
        //     $rel = $model->proyekGaleris;
        //     if($rel) :
        //         return $rel;
        //     endif;
        //     return null;
        // };
        // $parent['proyek_kemajuan_harian'] = function($model) {
        //     $rel = $model->proyekKemajuanHarians;
        //     if($rel) :
        //         return $rel;
        //     endif;
        //     return null;
        // };

        return $parent;
    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 't_proyek_kemajuan';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                'createdAtAttribute' => 'created_at',
                'updatedAtAttribute' => 'updated_at',
                'value' => date("Y-m-d H:i:s"),
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['id_proyek', 'item'], 'required'],
            [['id_proyek', 'id_satuan', 'status_verifikasi', 'created_by', 'updated_by', 'deleted_by', 'flag'], 'integer'],
            [['item'], 'string'],
            [['volume', 'bobot', 'volume_kemajuan', 'bobot_kemajuan'], 'number'],
            [['created_at', 'updated_at', 'deleted_at', 'nilai_biaya'], 'safe'],
            [['id_proyek'], 'exist', 'skipOnError' => true, 'targetClass' => \app\models\Proyek::className(), 'targetAttribute' => ['id_proyek' => 'id']],
            [['id_satuan'], 'exist', 'skipOnError' => true, 'targetClass' => \app\models\MasterSatuan::className(), 'targetAttribute' => ['id_satuan' => 'id']],
            [['created_by'], 'exist', 'skipOnError' => true, 'targetClass' => \app\models\User::className(), 'targetAttribute' => ['created_by' => 'id']],
            [['updated_by'], 'exist', 'skipOnError' => true, 'targetClass' => \app\models\User::className(), 'targetAttribute' => ['updated_by' => 'id']],
            [['deleted_by'], 'exist', 'skipOnError' => true, 'targetClass' => \app\models\User::className(), 'targetAttribute' => ['deleted_by' => 'id']],
            [['id_parent'], 'exist', 'skipOnError' => true, 'targetClass' => \app\models\ProyekKemajuan::className(), 'targetAttribute' => ['id_parent' => 'id']],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'id_proyek' => 'Proyek',
            'id_parent' => 'Kategori',
            'id_satuan' => 'Satuan',
            'item' => 'Item',
            'volume' => 'Volume',
            'bobot' => 'Bobot (%)',
            'nilai_biaya' => 'Nilai Biaya (IDR)',
            'volume_kemajuan' => 'Volume Kemajuan',
            'bobot_kemajuan' => 'Bobot Kemajuan (%)',
            'status_verifikasi' => 'Status Verifikasi',
            'created_at' => 'Dibuat pada',
            'updated_at' => 'Diubah Pada',
            'deleted_at' => 'Dihapus pada',
            'created_by' => 'Dibuat oleh',
            'updated_by' => 'Diubah oleh',
            'deleted_by' => 'Dihapus oleh',
            'flag' => 'Flag'
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProyekGaleris()
    {
        return $this->hasMany(\app\models\ProyekGaleri::className(), ['id_proyek_kemajuan' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProyek()
    {
        return $this->hasOne(\app\models\Proyek::className(), ['id' => 'id_proyek']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSatuan()
    {
        return $this->hasOne(\app\models\MasterSatuan::className(), ['id' => 'id_satuan']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCreatedBy()
    {
        return $this->hasOne(\app\models\User::className(), ['id' => 'created_by']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUpdatedBy()
    {
        return $this->hasOne(\app\models\User::className(), ['id' => 'updated_by']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getDeletedBy()
    {
        return $this->hasOne(\app\models\User::className(), ['id' => 'deleted_by']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProyekKemajuanHarians()
    {
        return $this->hasMany(\app\models\ProyekKemajuanHarian::className(), ['id_proyek_kemajuan' => 'id']);
    }



    /**
     * @inheritdoc
     * @return \app\models\query\ProyekKemajuanQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \app\models\query\ProyekKemajuanQuery(get_called_class());
    }



    public function scenarios()
    {
        $parent = parent::scenarios();

        $columns = [
            'id',
            'id_parent',
            'id_proyek',
            'id_satuan',
            'item',
            'volume',
            'bobot',
            'nilai_biaya',
            'volume_kemajuan',
            'bobot_kemajuan',
            'status_verifikasi',
            'created_at',
            'updated_at',
            'deleted_at',
            'created_by',
            'updated_by',
            'deleted_by',
            'flag'
        ];

        $delete = [
            'deleted_at',
            'deleted_by',
            'flag'
        ];

        $parent[static::SCENARIO_CREATE] = $columns;
        $parent[static::SCENARIO_UPDATE] = $columns;
        $parent[static::SCENARIO_DELETE] = $delete;
        return $parent;
    }

    public function setRender($arr)
    {
        $this->_render = array_merge($this->_render, $arr);
    }

    public function removeRender($arr)
    {
        unset($this->_render[$arr]);
    }

    /**
     * Simplify return data xD
     */
    public function render()
    {
        return array_merge($this->_render, [
            "model" => $this,
        ]);
    }

    /**
     * override validate
     */
    public function validate($attributeNames = null, $clearErrors = true)
    {
        if ($this->isNewRecord) {
            $this->status_verifikasi = 0;
        }
        return parent::validate($attributeNames, $clearErrors);
    }

    /**
     * override load
     */
    public function load($data, $formName = null, $service = "web")
    {
        return parent::load($data, $formName);
    }

    public function getChildren()
    {
        return $this->hasMany(\app\models\ProyekKemajuan::class, ["id_parent" => "id"]);
    }

    public function getParent()
    {
        return $this->hasOne(\app\models\ProyekKemajuan::class, ["id" => "id_parent"]);
    }
}
