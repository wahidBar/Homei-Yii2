<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build
// Modified by Defri Indra
// 2021

namespace app\models\base;

use Yii;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "t_supplier_boq_proyek".
 *
 * @property integer $id
 * @property string $kode_unik
 * @property integer $id_user
 * @property string $boq_proyek
 * @property string $nomer_spk
 * @property string $informasi_proyek
 * @property integer $status
 * @property string $created_at
 * @property string $updated_at
 * @property string $deleted_at
 * @property integer $created_by
 * @property integer $updated_by
 * @property integer $deleted_by
 * @property integer $flag
 *
 * @property \app\models\User $user
 * @property string $aliasModel
 */
abstract class SupplierBoqProyek extends \yii\db\ActiveRecord
{



    const SCENARIO_CREATE = 'create';
    const SCENARIO_UPDATE = 'update';
    const SCENARIO_GENERATE = 'generate';
    const SCENARIO_UPDATE_STATUS = 'update-status';
    public $_render = [];

    /**
     * @inheiritance
     */
    public function fields()
    {
        $parent = parent::fields();

        if (isset($parent['id'])) :
            unset($parent['id']);
            $parent['id'] = function ($model) {
                return $model->id;
            };
        endif;
        if (isset($parent['isian_lanjutan_id'])) :
            unset($parent['isian_lanjutan_id']);
            $parent['isian_lanjutan_id'] = function ($model) {
                return $model->isian_lanjutan_id;
            };
        endif;
        if (isset($parent['kode_isian_lanjutan'])) :
            unset($parent['kode_isian_lanjutan']);
            $parent['kode_isian_lanjutan'] = function ($model) {
                return $model->kode_isian_lanjutan;
            };
        endif;
        if (isset($parent['kode_unik'])) :
            unset($parent['kode_unik']);
            $parent['kode_unik'] = function ($model) {
                return $model->kode_unik;
            };
        endif;
        if (isset($parent['id_user'])) :
            unset($parent['id_user']);
            $parent['id_user'] = function ($model) {
                return $model->id_user;
            };
            $parent['_user'] = function ($model) {
                $rel = $model->user;
                if ($rel) :
                    return $rel;
                endif;
                return null;
            };
        endif;
        if (isset($parent['boq_proyek'])) :
            unset($parent['boq_proyek']);
            $parent['boq_proyek'] = function ($model) {
                return $model->boq_proyek;
            };
        endif;
        if (isset($parent['nomer_spk'])) :
            unset($parent['nomer_spk']);
            $parent['nomer_spk'] = function ($model) {
                return $model->nomer_spk;
            };
        endif;
        if (isset($parent['informasi_proyek'])) :
            unset($parent['informasi_proyek']);
            $parent['informasi_proyek'] = function ($model) {
                return $model->informasi_proyek;
            };
        endif;
        if (isset($parent['status'])) :
            unset($parent['status']);
            $parent['status'] = function ($model) {
                return $model->status;
            };
        endif;
        if (isset($parent['created_at'])) :
            unset($parent['created_at']);
            $parent['created_at'] = function ($model) {
                return \app\components\Tanggal::toReadableDate($model->created_at, false);
            };
        endif;
        if (isset($parent['updated_at'])) :
            unset($parent['updated_at']);
            $parent['updated_at'] = function ($model) {
                return \app\components\Tanggal::toReadableDate($model->updated_at, false);
            };
        endif;
        if (isset($parent['deleted_at'])) :
            unset($parent['deleted_at']);
            $parent['deleted_at'] = function ($model) {
                return $model->deleted_at;
            };
        endif;
        if (isset($parent['created_by'])) :
            unset($parent['created_by']);
            $parent['created_by'] = function ($model) {
                return $model->created_by;
            };
        endif;
        if (isset($parent['updated_by'])) :
            unset($parent['updated_by']);
            $parent['updated_by'] = function ($model) {
                return $model->updated_by;
            };
        endif;
        if (isset($parent['deleted_by'])) :
            unset($parent['deleted_by']);
            $parent['deleted_by'] = function ($model) {
                return $model->deleted_by;
            };
        endif;
        if (isset($parent['flag'])) :
            unset($parent['flag']);
            $parent['flag'] = function ($model) {
                return $model->flag;
            };
        endif;



        return $parent;
    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 't_supplier_boq_proyek';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => BlameableBehavior::className(),
            ],
            [
                'class' => TimestampBehavior::className(),
                'createdAtAttribute' => 'created_at',
                'updatedAtAttribute' => 'updated_at',
                'value' => date("Y-m-d H:i:s"),
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['kode_unik', 'id_user'], 'required'],
            [['id_user', 'isian_lanjutan_id', 'status', 'created_by', 'updated_by', 'deleted_by', 'flag'], 'integer'],
            [['boq_proyek', 'informasi_proyek', 'kode_isian_lanjutan'], 'string'],
            [['created_at', 'updated_at', 'deleted_at'], 'safe'],
            [['kode_unik'], 'string', 'max' => 50],
            [['nomer_spk'], 'string', 'max' => 255],
            [['id_user'], 'exist', 'skipOnError' => true, 'targetClass' => \app\models\User::className(), 'targetAttribute' => ['id_user' => 'id']]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'isian_lanjutan_id' => 'Isian Lanjutan',
            'kode_isian_lanjutan' => 'Kode Isian Lanjutan',
            'kode_unik' => 'Kode Unik',
            'id_user' => 'User',
            'boq_proyek' => 'BOQ',
            'nomer_spk' => 'Nomer SPK',
            'informasi_proyek' => 'Informasi Proyek',
            'status' => 'Status',
            'created_at' => 'Dibuat pada',
            'updated_at' => 'Diubah Pada',
            'deleted_at' => 'Dihapus pada',
            'created_by' => 'Dibuat oleh',
            'updated_by' => 'Diubah oleh',
            'deleted_by' => 'Dihapus oleh',
            'flag' => 'Flag',
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return array_merge(parent::attributeHints(), [
            'status' => 'status boq 1=aktif 0=nonaktif',
        ]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(\app\models\User::className(), ['id' => 'id_user']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCreatedBy()
    {
        return $this->hasOne(\app\models\User::className(), ['id' => 'created_by']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUpdatedBy()
    {
        return $this->hasOne(\app\models\User::className(), ['id' => 'updated_by']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getDeletedBy()
    {
        return $this->hasOne(\app\models\User::className(), ['id' => 'deleted_by']);
    }

    /**
     * @inheritdoc
     * @return \app\models\query\SupplierBoqProyekQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \app\models\query\SupplierBoqProyekQuery(get_called_class());
    }



    public function scenarios()
    {
        $parent = parent::scenarios();

        $columns = [
            'id',
            'kode_unik',
            'id_user',
            'boq_proyek',
            'nomer_spk',
            'informasi_proyek',
            'status',
            'created_at',
            'updated_at',
            'deleted_at',
            'created_by',
            'updated_by',
            'deleted_by',
            'flag',
        ];

        $update_status = [
            'status',
            'updated_at',
            'updated_by',

        ];

        $generate = [
            'id',
            'kode_unik',
            'isian_lanjutan_id',
            'kode_isian_lanjutan',
            'id_user',
            'status',
            'created_at',
            'updated_at',
            'deleted_at',
            'created_by',
            'updated_by',
            'deleted_by',
        ];

        $parent[static::SCENARIO_CREATE] = $columns;
        $parent[static::SCENARIO_UPDATE] = $columns;
        $parent[static::SCENARIO_GENERATE] = $generate;
        $parent[static::SCENARIO_UPDATE_STATUS] = $update_status;
        return $parent;
    }

    public function setRender($arr)
    {
        $this->_render = array_merge($this->_render, $arr);
    }

    public function removeRender($arr)
    {
        unset($this->_render[$arr]);
    }

    /**
     * Simplify return data xD
     */
    public function render()
    {
        return array_merge($this->_render, [
            "model" => $this,
        ]);
    }

    /**
     * override validate
     */
    public function validate($attributeNames = null, $clearErrors = true)
    {
        return parent::validate($attributeNames, $clearErrors);
    }

    /**
     * override load
     */
    public function load($data, $formName = null, $service = "web")
    {
        return parent::load($data, $formName);
    }
}
