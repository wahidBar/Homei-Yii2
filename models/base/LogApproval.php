<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build
// Modified by Defri Indra
// 2021

namespace app\models\base;

use Yii;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "tlog_approval_sebelum_pekerjaan".
 *
 * @property integer $id
 * @property integer $id_approval
 * @property integer $id_proyek
 * @property integer $id_progress
 * @property string $nama_proyek
 * @property string $nama_progress
 * @property string $foto_material
 * @property string $keterangan
 * @property integer $status
 * @property string $revisi
 * @property string $deskripsi_log
 * @property string $created_at
 * @property integer $created_by
 *
 * @property \app\models\Proyek $proyek
 * @property \app\models\ApprovalSebelumPekerjaan $approval
 * @property \app\models\ProyekKemajuan $progress
 * @property \app\models\User $createdBy
 * @property string $aliasModel
 */
abstract class LogApproval extends \yii\db\ActiveRecord
{



    const SCENARIO_CREATE = 'create';
    const SCENARIO_UPDATE = 'update';
    public $_render = [];
    
    /**
     * @inheiritance
     */
    public function fields()
    {
        $parent = parent::fields();

        if(isset($parent['id'])) :
            unset($parent['id']);
            $parent['id'] = function($model) {
                return $model->id;
            };
        endif;
        if(isset($parent['id_approval'])) :
            unset($parent['id_approval']);
            $parent['id_approval'] = function($model) {
                return $model->id_approval;
            };
            $parent['_approval'] = function($model) {
                $rel = $model->approval;
                if ($rel) :
                    return $rel;
                endif;
                return null;
            };
        endif;
        if(isset($parent['id_proyek'])) :
            unset($parent['id_proyek']);
            $parent['id_proyek'] = function($model) {
                return $model->id_proyek;
            };
            $parent['_proyek'] = function($model) {
                $rel = $model->proyek;
                if ($rel) :
                    return $rel;
                endif;
                return null;
            };
        endif;
        if(isset($parent['id_progress'])) :
            unset($parent['id_progress']);
            $parent['id_progress'] = function($model) {
                return $model->id_progress;
            };
            $parent['_progress'] = function($model) {
                $rel = $model->progress;
                if ($rel) :
                    return $rel;
                endif;
                return null;
            };
        endif;
        if(isset($parent['nama_proyek'])) :
            unset($parent['nama_proyek']);
            $parent['nama_proyek'] = function($model) {
                return $model->nama_proyek;
            };
        endif;
        if(isset($parent['nama_progress'])) :
            unset($parent['nama_progress']);
            $parent['nama_progress'] = function($model) {
                return $model->nama_progress;
            };
        endif;
        if(isset($parent['foto_material'])) :
            unset($parent['foto_material']);
            $parent['foto_material'] = function($model) {
                return \Yii::$app->formatter->asMyimage($model->foto_material, false);
            };
        endif;
        if(isset($parent['keterangan'])) :
            unset($parent['keterangan']);
            $parent['keterangan'] = function($model) {
                return $model->keterangan;
            };
        endif;
        if(isset($parent['status'])) :
            unset($parent['status']);
            $parent['status'] = function($model) {
                return $model->status;
            };
        endif;
        if(isset($parent['revisi'])) :
            unset($parent['revisi']);
            $parent['revisi'] = function($model) {
                return $model->revisi;
            };
        endif;
        if(isset($parent['deskripsi_log'])) :
            unset($parent['deskripsi_log']);
            $parent['deskripsi_log'] = function($model) {
                return $model->deskripsi_log;
            };
        endif;
        if(isset($parent['created_at'])) :
            unset($parent['created_at']);
            $parent['created_at'] = function($model) {
                return \app\components\Tanggal::toReadableDate($model->created_at, false);
            };
        endif;
        if(isset($parent['created_by'])) :
            unset($parent['created_by']);
            $parent['created_by'] = function($model) {
                return $model->created_by;
            };
            $parent['_created_by'] = function($model) {
                $rel = $model->createdBy;
                if ($rel) :
                    return $rel;
                endif;
                return null;
            };
        endif;



        return $parent;
    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'tlog_approval_sebelum_pekerjaan';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => BlameableBehavior::className(),
                'updatedByAttribute' => false,
            ],
            [
                'class' => TimestampBehavior::className(),
                'createdAtAttribute' => 'created_at',
                'updatedAtAttribute' => false,
                'value' => date("Y-m-d H:i:s"),
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['id_approval', 'id_proyek', 'id_progress', 'nama_proyek', 'nama_progress', 'foto_material', 'keterangan'], 'required'],
            [['id_approval', 'id_proyek', 'id_progress', 'status', 'created_by'], 'integer'],
            [['keterangan', 'revisi', 'deskripsi_log'], 'string'],
            [['created_at'], 'safe'],
            [['nama_proyek', 'nama_progress', 'foto_material'], 'string', 'max' => 250],
            [['id_proyek'], 'exist', 'skipOnError' => true, 'targetClass' => \app\models\Proyek::className(), 'targetAttribute' => ['id_proyek' => 'id']],
            [['id_approval'], 'exist', 'skipOnError' => true, 'targetClass' => \app\models\ApprovalSebelumPekerjaan::className(), 'targetAttribute' => ['id_approval' => 'id']],
            [['id_progress'], 'exist', 'skipOnError' => true, 'targetClass' => \app\models\ProyekKemajuan::className(), 'targetAttribute' => ['id_progress' => 'id']],
            [['created_by'], 'exist', 'skipOnError' => true, 'targetClass' => \app\models\User::className(), 'targetAttribute' => ['created_by' => 'id']]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
        'id' => Yii::t('cruds', 'ID'),
        'id_approval' => Yii::t('cruds', 'Approval'),
        'id_proyek' => Yii::t('cruds', 'Proyek'),
        'id_progress' => Yii::t('cruds', 'Progress'),
        'nama_proyek' => Yii::t('cruds', 'Nama Proyek'),
        'nama_progress' => Yii::t('cruds', 'Nama Progress'),
        'foto_material' => Yii::t('cruds', 'Foto Material'),
        'keterangan' => Yii::t('cruds', 'Keterangan'),
        'status' => Yii::t('cruds', 'Status'),
        'revisi' => Yii::t('cruds', 'Revisi'),
        'deskripsi_log' => Yii::t('cruds', 'Deskripsi Log'),
        'created_at' => 'Dibuat pada',
        'created_by' => 'Dibuat oleh',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProyek()
    {
        return $this->hasOne(\app\models\Proyek::className(), ['id' => 'id_proyek']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getApproval()
    {
        return $this->hasOne(\app\models\ApprovalSebelumPekerjaan::className(), ['id' => 'id_approval']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProgress()
    {
        return $this->hasOne(\app\models\ProyekKemajuan::className(), ['id' => 'id_progress']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCreatedBy()
    {
        return $this->hasOne(\app\models\User::className(), ['id' => 'created_by']);
    }


    
    /**
     * @inheritdoc
     * @return \app\models\query\LogApprovalQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \app\models\query\LogApprovalQuery(get_called_class());
    }



    public function scenarios()
    {
        $parent = parent::scenarios();

        $columns = [
            'id',
            'id_approval',
            'id_proyek',
            'id_progress',
            'nama_proyek',
            'nama_progress',
            'foto_material',
            'keterangan',
            'status',
            'revisi',
            'deskripsi_log',
            'created_at',
            'created_by',
        ];

        $parent[static::SCENARIO_CREATE] = $columns;
        $parent[static::SCENARIO_UPDATE] = $columns;
        return $parent;
    }

    public function setRender($arr)
    {
        $this->_render = array_merge($this->_render, $arr);
    }

    public function removeRender($arr)
    {
        unset($this->_render[$arr]);
    }

    /**
     * Simplify return data xD
     */
    public function render()
    {
        return array_merge($this->_render, [
            "model" => $this,
        ]);
    }

    /**
     * override validate
     */
    public function validate($attributeNames = null, $clearErrors = true)
    {
        return parent::validate($attributeNames, $clearErrors);
    }

    /**
     * override load
     */
    public function load($data, $formName = null, $service = "web")
    {
        return parent::load($data, $formName);
    }

}
