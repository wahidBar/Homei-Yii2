<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build
// Modified by Defri Indra
// 2021

namespace app\models\base;

use Yii;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "user_social_media".
 *
 * @property integer $id
 * @property integer $user_id
 * @property string $identifier
 * @property string $uniqid
 * @property string $type
 * @property string $created_at
 * @property string $last_login
 *
 * @property \app\models\User $user
 * @property string $aliasModel
 */
abstract class UserSocialMedia extends \yii\db\ActiveRecord
{



    const SCENARIO_CREATE = 'create';
    const SCENARIO_UPDATE = 'update';
    public $_render = [];

    /**
     * @inheiritance
     */
    public function fields()
    {
        $parent = parent::fields();

        if (isset($parent['id'])) :
            unset($parent['id']);
            $parent['id'] = function ($model) {
                return $model->id;
            };
        endif;
        if (isset($parent['user_id'])) :
            unset($parent['user_id']);
            $parent['user_id'] = function ($model) {
                return $model->user_id;
            };
            $parent['_user'] = function ($model) {
                $rel = $model->user;
                if ($rel) :
                    return $rel;
                endif;
                return null;
            };
        endif;
        if (isset($parent['identifier'])) :
            unset($parent['identifier']);
            $parent['identifier'] = function ($model) {
                return $model->identifier;
            };
        endif;
        if (isset($parent['uniqid'])) :
            unset($parent['uniqid']);
            $parent['uniqid'] = function ($model) {
                return $model->uniqid;
            };
        endif;
        if (isset($parent['type'])) :
            unset($parent['type']);
            $parent['type'] = function ($model) {
                return $model->type;
            };
        endif;
        if (isset($parent['created_at'])) :
            unset($parent['created_at']);
            $parent['created_at'] = function ($model) {
                return \app\components\Tanggal::toReadableDate($model->created_at, false);
            };
        endif;
        if (isset($parent['last_login'])) :
            unset($parent['last_login']);
            $parent['last_login'] = function ($model) {
                return $model->last_login;
            };
        endif;



        return $parent;
    }

    /**
     * ENUM field values
     */
    const TYPE_FACEBOOK = 'facebook';
    const TYPE_GOOGLE = 'google';
    var $enum_labels = false;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'user_social_media';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                'createdAtAttribute' => 'created_at',
                'updatedAtAttribute' => false,
                'value' => date("Y-m-d H:i:s"),
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['user_id', 'identifier', 'uniqid', 'type'], 'required'],
            [['user_id'], 'integer'],
            [['type'], 'string'],
            [['created_at', 'last_login'], 'safe'],
            [['identifier'], 'string', 'max' => 200],
            [['uniqid'], 'string', 'max' => 100],
            [['user_id'], 'exist', 'skipOnError' => true, 'targetClass' => \app\models\User::className(), 'targetAttribute' => ['user_id' => 'id']],
            [
                'type', 'in', 'range' => [
                    self::TYPE_FACEBOOK,
                    self::TYPE_GOOGLE,
                ]
            ]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('cruds', 'ID'),
            'user_id' => Yii::t('cruds', 'Pengguna'),
            'identifier' => Yii::t('cruds', 'Pengenalan'),
            'uniqid' => Yii::t('cruds', 'Kode Unik'),
            'type' => Yii::t('cruds', 'Jenis'),
            'created_at' => Yii::t('cruds', 'Dibuat pada'),
            'last_login' => Yii::t('cruds', 'Terakhir Masuk'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(\app\models\User::className(), ['id' => 'user_id']);
    }



    /**
     * @inheritdoc
     * @return \app\models\query\UserSocialMediaQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \app\models\query\UserSocialMediaQuery(get_called_class());
    }


    /**
     * get column type enum value label
     * @param string $value
     * @return string
     */
    public static function getTypeValueLabel($value)
    {
        $labels = self::optsType();
        if (isset($labels[$value])) {
            return $labels[$value];
        }
        return $value;
    }

    /**
     * column type ENUM value labels
     * @return array
     */
    public static function optsType()
    {
        return [
            self::TYPE_FACEBOOK => Yii::t('cruds', self::TYPE_FACEBOOK),
            self::TYPE_GOOGLE => Yii::t('cruds', self::TYPE_GOOGLE),
        ];
    }


    public function scenarios()
    {
        $parent = parent::scenarios();

        $columns = [
            'id',
            'user_id',
            'identifier',
            'uniqid',
            'type',
            'created_at',
            'last_login',
        ];

        $parent[static::SCENARIO_CREATE] = $columns;
        $parent[static::SCENARIO_UPDATE] = $columns;
        return $parent;
    }

    public function setRender($arr)
    {
        $this->_render = array_merge($this->_render, $arr);
    }

    public function removeRender($arr)
    {
        unset($this->_render[$arr]);
    }

    /**
     * Simplify return data xD
     */
    public function render()
    {
        return array_merge($this->_render, [
            "model" => $this,
        ]);
    }

    /**
     * override validate
     */
    public function validate($attributeNames = null, $clearErrors = true)
    {
        return parent::validate($attributeNames, $clearErrors);
    }

    /**
     * override load
     */
    public function load($data, $formName = null, $service = "web")
    {
        return parent::load($data, $formName);
    }
}
