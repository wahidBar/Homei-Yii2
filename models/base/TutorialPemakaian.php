<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build
// Modified by Defri Indra
// 2021

namespace app\models\base;

use Yii;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "t_tutorial_pemakaian".
 *
 * @property integer $id
 * @property integer $id_kategori
 * @property string $judul
 * @property string $link_youtube
 * @property string $thumbnail
 * @property string $updated_at
 *
 * @property \app\models\TutorialPemakaianKategori $kategori
 * @property string $aliasModel
 */
abstract class TutorialPemakaian extends \yii\db\ActiveRecord
{



    const SCENARIO_CREATE = 'create';
    const SCENARIO_UPDATE = 'update';
    public $_render = [];

    /**
     * @inheiritance
     */
    public function fields()
    {
        $parent = parent::fields();

        if (isset($parent['id'])) :
            unset($parent['id']);
            $parent['id'] = function ($model) {
                return $model->id;
            };
        endif;
        if (isset($parent['id_kategori'])) :
            unset($parent['id_kategori']);
            $parent['id_kategori'] = function ($model) {
                return $model->id_kategori;
            };
            $parent['_kategori'] = function ($model) {
                $rel = $model->kategori;
                if ($rel) :
                    return $rel;
                endif;
                return null;
            };
        endif;
        if (isset($parent['judul'])) :
            unset($parent['judul']);
            $parent['judul'] = function ($model) {
                return $model->judul;
            };
        endif;
        if (isset($parent['link_youtube'])) :
            unset($parent['link_youtube']);
            $parent['link_youtube'] = function ($model) {
                return $model->link_youtube;
            };
        endif;
        if (isset($parent['thumbnail'])) :
            unset($parent['thumbnail']);
            $parent['thumbnail'] = function ($model) {
                return $model->thumbnail;
            };
        endif;
        if (isset($parent['updated_at'])) :
            unset($parent['updated_at']);
            $parent['updated_at'] = function ($model) {
                return \app\components\Tanggal::toReadableDate($model->updated_at, false);
            };
        endif;



        return $parent;
    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 't_tutorial_pemakaian';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                'createdAtAttribute' => false,
                'updatedAtAttribute' => 'updated_at',
                'value' => date("Y-m-d H:i:s"),
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['link_youtube'], 'validateLinkYoutube'],
            [['id_kategori', 'judul', 'link_youtube', 'thumbnail'], 'required'],
            [['id_kategori'], 'integer'],
            [['updated_at'], 'safe'],
            [['judul'], 'string', 'max' => 255],
            [['link_youtube', 'thumbnail'], 'string', 'max' => 250],
            [['id_kategori'], 'exist', 'skipOnError' => true, 'targetClass' => \app\models\TutorialPemakaianKategori::className(), 'targetAttribute' => ['id_kategori' => 'id']]
        ];
    }

    /**
     * function validateLinkYoutube
     */
    public function validateLinkYoutube($attribute, $params)
    {
        if (!empty($this->$attribute)) {
            $url = $this->$attribute;
            $url = str_replace("watch?v=", "embed/", $url);
            $url = str_replace("youtu.be/", "youtube.com/embed/", $url);
            $url = str_replace("http://", "https://", $url);
            $this->$attribute = $url;
        }

        // validate is valid url
        if (!filter_var($this->$attribute, FILTER_VALIDATE_URL)) {
            $this->addError($attribute, 'Link youtube tidak valid');
        }

        // validate is contain https://youtube.com/embed/
        if (!preg_match("/https\:\/\/youtube\.com\/embed\//", $this->$attribute)) {
            $this->addError($attribute, 'Link youtube tidak valid');
        }

        // get video id
        $video_id = explode("/", $this->$attribute);
        $video_id = $video_id[count($video_id) - 1];

        // get thumbnail url
        $thumbnail_url = "https://img.youtube.com/vi/" . $video_id . "/0.jpg";

        // set thumbnail attribute
        $this->thumbnail = $thumbnail_url;
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('cruds', 'ID'),
            'id_kategori' => Yii::t('cruds', 'Kategori'),
            'judul' => Yii::t('cruds', 'Judul'),
            'link_youtube' => Yii::t('cruds', 'Link Youtube'),
            'thumbnail' => Yii::t('cruds', 'Thumbnail'),
            'updated_at' => 'Diubah Pada',
        ];
    }

    public function attributeHints()
    {
        return [
            'link_youtube' => 'https://youtu.be/MQUBUKn8E1k',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getKategori()
    {
        return $this->hasOne(\app\models\TutorialPemakaianKategori::className(), ['id' => 'id_kategori']);
    }



    /**
     * @inheritdoc
     * @return \app\models\query\TutorialPemakaianQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \app\models\query\TutorialPemakaianQuery(get_called_class());
    }



    public function scenarios()
    {
        $parent = parent::scenarios();

        $columns = [
            'id',
            'id_kategori',
            'judul',
            'link_youtube',
            'thumbnail',
            'updated_at',
        ];

        $parent[static::SCENARIO_CREATE] = $columns;
        $parent[static::SCENARIO_UPDATE] = $columns;
        return $parent;
    }

    public function setRender($arr)
    {
        $this->_render = array_merge($this->_render, $arr);
    }

    public function removeRender($arr)
    {
        unset($this->_render[$arr]);
    }

    /**
     * Simplify return data xD
     */
    public function render()
    {
        return array_merge($this->_render, [
            "model" => $this,
        ]);
    }

    /**
     * override validate
     */
    public function validate($attributeNames = null, $clearErrors = true)
    {
        return parent::validate($attributeNames, $clearErrors);
    }

    /**
     * override load
     */
    public function load($data, $formName = null, $service = "web")
    {
        return parent::load($data, $formName);
    }
}
